{"version":3,"sources":["webpack:///./djsr/frontend/src/components/FormikMDInput.js","webpack:///./djsr/frontend/src/components/MaterialUiUserExams.js","webpack:///./node_modules/@material-ui/core/esm/Typography/Typography.js","webpack:///./node_modules/@material-ui/core/esm/Typography/index.js"],"names":["FormikMdInput","name","touched","value","errors","icon","onChange","onBlur","label","id","type","hideInput","disableAutocomplete","disabled","prepend","useState","active","setActive","join","e","console","log","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","UserExams","props","setState","exams","axiosInstance","get","then","response","data","error","exam","state","concat","post","tasks","addExam","updateExams","Yup","shape","min","max","required","values","helpers","setTimeout","setSubmitting","errResponse","setValues","setTouched","setFieldError","handleChange","handleBlur","handleSubmit","isSubmitting","general","map","createExamCopy","Component","propTypes"],"mappings":"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,SAAS,CAACsC,SAAV,GAAsB,EAAtB;AAEatC,wEAAf,E;;;;;;;;;;;;AC/OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACgC;AAC3D;AACI;AACX;AACsB;AACD;AACtC;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA,KAAK;;AAEL,4DAA4D,KAAK;AACjE;AACA;AACA,KAAK;;AAEL,yDAAyD,KAAK;AAC9D;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kGAAwB;;AAEtC;AACA,sBAAsB,mDAAmB,YAAY,kFAAQ;AAC7D,eAAe,oDAAI,mHAAmH,iEAAU,yJAAyJ,iEAAU,6DAA6D,iEAAU;AAC1X;AACA,GAAG;AACH,CAAC;AACD,KAAqC;AACrC;AACA;AACA;AACA,SAAS,iDAAS;;AAElB;AACA;AACA;AACA,YAAY,iDAAS;;AAErB;AACA;AACA;AACA;AACA,WAAW,iDAAS;;AAEpB;AACA;AACA;AACA,aAAa,iDAAS;;AAEtB;AACA;AACA;AACA,SAAS,iDAAS;;AAElB;AACA;AACA;AACA;AACA;AACA,aAAa,iDAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,iDAAS;;AAEpB;AACA;AACA;AACA,gBAAgB,iDAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iDAAS;;AAEnB;AACA;AACA;AACA,aAAa,iDAAS;;AAEtB;AACA;AACA;AACA,WAAW,iDAAS;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iDAAS;AAC3B,CAAC,GAAG,SAAM;AACK,iIAAU;AACzB;AACA,CAAC,aAAa,E;;;;;;;;;;;;AC7Pd;AAAA;AAAA;AAAA","file":"8.main.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst FormikMdInput = ({\r\n  name,\r\n  touched,\r\n  value,\r\n  errors,\r\n  icon,\r\n  onChange,\r\n  onBlur,\r\n  label,\r\n  id,\r\n  type,\r\n  hideInput,\r\n  disableAutocomplete,\r\n  disabled,\r\n  prepend,\r\n}) => {\r\n  const [active, setActive] = useState(false);\r\n  //todo repair prepend render\r\n\r\n  // console.log(\r\n  //   \"ninput\",\r\n  //   name,\r\n  //   active,\r\n  //   value === \"\",\r\n  //   value === null,\r\n  //   active || !(value == \"\" || value == null),\r\n  //     \"value\",\r\n  //     value\r\n  // );\r\n  return (\r\n    <div className=\"md-form form-group\">\r\n      {!!icon && (\r\n        <i\r\n          className={[\r\n            \"fa\",\r\n            icon,\r\n            \"prefix\",\r\n            touched ? (!errors ? \"text-success\" : \"red-text\") : \"\",\r\n          ].join(\" \")}\r\n        />\r\n      )}\r\n      {!!prepend && (\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\">{prepend}</span>\r\n        </div>\r\n      )}\r\n      <input\r\n        name={name}\r\n        onChange={onChange}\r\n        onBlur={(e) => {\r\n          onBlur(e);\r\n          setActive(false);\r\n        }}\r\n        onFocus={() => {\r\n            console.log(\"input focus event\",name)\r\n          setActive(true);\r\n        }}\r\n        value={value}\r\n        id={id}\r\n        type={type}\r\n        autoComplete={disableAutocomplete ? \"off\" : \"on\"}\r\n        // className=\"form-control is-invalid\"\r\n        className={[\r\n          \"form-control\",\r\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\r\n          hideInput ? \"text-password\" : \"\",\r\n          disabled ? \"disabled\" : \"\",\r\n        ].join(\" \")}\r\n        disabled={disabled}\r\n      />\r\n      <label\r\n        htmlFor={id}\r\n        className={[\r\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\r\n          active || !(value === \"\" || value === null) ? \"active\" : \"\",\r\n        ].join(\" \")}\r\n      >\r\n        {!!label ? label : \"\"}\r\n      </label>\r\n      {!!errors && !!touched && (\r\n        <div className=\"invalid-feedback d-block\">{errors}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormikMdInput;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardTitle,\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBRow,\r\n} from \"mdbreact\";\r\nimport axiosInstance from \"./axiosAPI\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikMdInput from \"./FormikMDInput\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));\r\n\r\n  class UserExams extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        exams: null,\r\n      };\r\n    }\r\n  \r\n    updateExams = () => {\r\n      this.setState({ exams: null });\r\n      axiosInstance\r\n        .get(\"/user/tests/\")\r\n        .then((response) => {\r\n          console.log(\"UE update response\", response, \"exams\", response.data);\r\n          this.setState({ exams: response.data });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"UE update error response\", error);\r\n        });\r\n    };\r\n    addExam = (exam) => {\r\n      this.setState((state) => {\r\n        state.exams = [exam].concat(state.exams);\r\n        return state;\r\n      });\r\n    };\r\n    createExamCopy = (exam) => {\r\n      axiosInstance\r\n        .post(\"/user/maketest/\", {\r\n          name: exam.name + \"-kopia\",\r\n          tasks: exam.tasks,\r\n        })\r\n        .then((response) => {\r\n          this.addExam(response.data[0]);\r\n        });\r\n    };\r\n    // componentWillMount() {\r\n    //\r\n    // }\r\n    //\r\n    componentDidMount() {\r\n      this.updateExams();\r\n    }\r\n    //\r\n    // componentWillReceiveProps(nextProps) {\r\n    //\r\n    // }\r\n    //\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //\r\n    // }\r\n    //\r\n    // componentWillUpdate(nextProps, nextState) {\r\n    //\r\n    // }\r\n    //\r\n    // componentDidUpdate(prevProps, prevState) {\r\n    //\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //\r\n    // }\r\n  \r\n    render() {\r\n      let exams = this.state.exams;\r\n      if (!exams) {\r\n        return (\r\n          <MDBContainer>\r\n            <div>Ladowanie</div>\r\n          </MDBContainer>\r\n        );\r\n      }\r\n      return (\r\n        <MDBContainer>\r\n          <div className=\"w-100 h1-responsive text-center mb-5\">\r\n            Moje sprawdziany\r\n          </div>\r\n          <MDBRow>\r\n            <MDBCol size={3}>\r\n              <MDBCard className=\"w-100 mb-5\">\r\n                <MDBCardBody>\r\n                  <MDBCardTitle>Dodaj Sprawdzian</MDBCardTitle>\r\n                  <Formik\r\n                    initialValues={{\r\n                      name: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                      name: Yup.string()\r\n                        .min(2, \"Nazwa za krotka\")\r\n                        .max(50, \"Nazwa za dluga\")\r\n                        .required(\"Pole wymagane\"),\r\n                    })}\r\n                    onSubmit={(values, helpers) => {\r\n                      setTimeout(() => {\r\n                        helpers.setSubmitting(true);\r\n                        axiosInstance\r\n                          .post(\"/user/maketest/\", {\r\n                            name: values.name,\r\n                            tasks: \"\",\r\n                          })\r\n                          .then((response) => {\r\n                            console.log(\"UE create response\", response);\r\n                            this.addExam(response.data[0]);\r\n                            helpers.setSubmitting(false);\r\n                            // this.props.history.push(\"/\");\r\n                          })\r\n                          .catch((error) => {\r\n                            // console.log(\"login error\", error.response);\r\n                            const errResponse = error.response;\r\n                            helpers.setSubmitting(false);\r\n                            helpers.setValues(\r\n                              {\r\n                                name: \"\",\r\n                              },\r\n                              false\r\n                            );\r\n                            helpers.setTouched(\r\n                              {\r\n                                name: false,\r\n                              },\r\n                              false\r\n                            );\r\n                            helpers.setFieldError(\"general\", \"Nazwa w uzyciu\");\r\n                          });\r\n                      }, 400);\r\n                    }}\r\n                  >\r\n                    {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                    }) => (\r\n                      <Form onSubmit={handleSubmit}>\r\n                        <div className=\"grey-text\">\r\n                          <FormikMdInput\r\n                            label=\"Nazwa sprawdzianu\"\r\n                            errors={errors.name}\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            touched={touched.name}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.name}\r\n                            disabled={isSubmitting}\r\n                          />\r\n                          {!!errors.general && (\r\n                            <div className=\"invalid-feedback d-block pb-4\">\r\n                              {errors.general}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                          <Button\r\n                           variant=\"contained\" \r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting}\r\n                          >\r\n                            Zapisz\r\n                          </Button>\r\n                        </div>\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n            {exams.map((exam) => {\r\n              return (\r\n                <MDBCol size={3}>\r\n                  <MDBCard className=\"w-100 mb-5\">\r\n                    <MDBCardBody className=\"text-center\">\r\n                      <MDBCardTitle>{exam.name}</MDBCardTitle>\r\n                      <Link to={\"/editor/\" + exam.id}>\r\n                        <Button  variant=\"contained\" \r\n                            color=\"primary\" >Edytuj</Button>\r\n                      </Link>\r\n                      <Button\r\n                      variant = \"contained\"\r\n                      color = \"secondary\"\r\n                        onClick={() => {\r\n                          this.createExamCopy(exam);\r\n                        }}\r\n                      >\r\n                        Utworz kopie\r\n                      </Button>\r\n                    </MDBCardBody>\r\n                  </MDBCard>\r\n                </MDBCol>\r\n              );\r\n            })}\r\n          </MDBRow>\r\n        </MDBContainer>\r\n      );\r\n    }\r\n  }\r\n  \r\n  UserExams.propTypes = {};\r\n\r\nexport default UserExams;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","export { default } from './Typography';"],"sourceRoot":""}