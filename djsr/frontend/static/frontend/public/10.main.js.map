{"version":3,"sources":["webpack:///./djsr/frontend/src/components/UserExams.js"],"names":["UserExams","props","setState","exams","axiosInstance","get","then","response","console","log","data","error","exam","state","concat","post","name","tasks","addExam","updateExams","Yup","shape","min","max","required","values","helpers","setTimeout","setSubmitting","errResponse","setValues","setTouched","setFieldError","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","general","map","id","createExamCopy","Component","propTypes"],"mappings":"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","file":"10.main.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCol,\n  MDBContainer,\n  MDBRow,\n} from \"mdbreact\";\nimport axiosInstance from \"./axiosAPI\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormikMdInput from \"./FormikMDInput\";\nimport { Link } from \"react-router-dom\";\n\nclass UserExams extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exams: null,\n    };\n  }\n\n  updateExams = () => {\n    this.setState({ exams: null });\n    axiosInstance\n      .get(\"/user/tests/\")\n      .then((response) => {\n        console.log(\"UE update response\", response, \"exams\", response.data);\n        this.setState({ exams: response.data });\n      })\n      .catch((error) => {\n        console.log(\"UE update error response\", error);\n      });\n  };\n  addExam = (exam) => {\n    this.setState((state) => {\n      state.exams = [exam].concat(state.exams);\n      return state;\n    });\n  };\n  createExamCopy = (exam) => {\n    axiosInstance\n      .post(\"/user/maketest/\", {\n        name: exam.name + \"-kopia\",\n        tasks: exam.tasks,\n      })\n      .then((response) => {\n        this.addExam(response.data[0]);\n      });\n  };\n  // componentWillMount() {\n  //\n  // }\n  //\n  componentDidMount() {\n    this.updateExams();\n  }\n  //\n  // componentWillReceiveProps(nextProps) {\n  //\n  // }\n  //\n  // shouldComponentUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentWillUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //\n  // }\n  //\n  // componentWillUnmount() {\n  //\n  // }\n\n  render() {\n    let exams = this.state.exams;\n    if (!exams) {\n      return (\n        <MDBContainer>\n          <div>Ladowanie</div>\n        </MDBContainer>\n      );\n    }\n    return (\n      <MDBContainer>\n        <div className=\"w-100 h1-responsive text-center mb-5\">\n          Moje sprawdziany\n        </div>\n        <MDBRow>\n          <MDBCol size={3}>\n            <MDBCard className=\"w-100 mb-5\">\n              <MDBCardBody>\n                <MDBCardTitle>Dodaj Sprawdzian</MDBCardTitle>\n                <Formik\n                  initialValues={{\n                    name: \"\",\n                  }}\n                  validationSchema={Yup.object().shape({\n                    name: Yup.string()\n                      .min(2, \"Nazwa za krotka\")\n                      .max(50, \"Nazwa za dluga\")\n                      .required(\"Pole wymagane\"),\n                  })}\n                  onSubmit={(values, helpers) => {\n                    setTimeout(() => {\n                      helpers.setSubmitting(true);\n                      axiosInstance\n                        .post(\"/user/maketest/\", {\n                          name: values.name,\n                          tasks: \"\",\n                        })\n                        .then((response) => {\n                          console.log(\"UE create response\", response);\n                          this.addExam(response.data[0]);\n                          helpers.setSubmitting(false);\n                          // this.props.history.push(\"/\");\n                        })\n                        .catch((error) => {\n                          // console.log(\"login error\", error.response);\n                          const errResponse = error.response;\n                          helpers.setSubmitting(false);\n                          helpers.setValues(\n                            {\n                              name: \"\",\n                            },\n                            false\n                          );\n                          helpers.setTouched(\n                            {\n                              name: false,\n                            },\n                            false\n                          );\n                          helpers.setFieldError(\"general\", \"Nazwa w uzyciu\");\n                        });\n                    }, 400);\n                  }}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                  }) => (\n                    <Form onSubmit={handleSubmit}>\n                      <div className=\"grey-text\">\n                        <FormikMdInput\n                          label=\"Nazwa sprawdzianu\"\n                          errors={errors.name}\n                          name=\"name\"\n                          id=\"name\"\n                          touched={touched.name}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.name}\n                          disabled={isSubmitting}\n                        />\n                        {!!errors.general && (\n                          <div className=\"invalid-feedback d-block pb-4\">\n                            {errors.general}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"text-center\">\n                        <MDBBtn\n                          color=\"primary\"\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                        >\n                          Zapisz\n                        </MDBBtn>\n                      </div>\n                    </Form>\n                  )}\n                </Formik>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n          {exams.map((exam) => {\n            return (\n              <MDBCol size={3}>\n                <MDBCard className=\"w-100 mb-5\">\n                  <MDBCardBody className=\"text-center\">\n                    <MDBCardTitle>{exam.name}</MDBCardTitle>\n                    <Link to={\"/editor/\" + exam.id}>\n                      <MDBBtn>Edytuj</MDBBtn>\n                    </Link>\n                    <MDBBtn\n                      onClick={() => {\n                        this.createExamCopy(exam);\n                      }}\n                    >\n                      Utworz kopie\n                    </MDBBtn>\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n            );\n          })}\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}\n\nUserExams.propTypes = {};\n\nexport default UserExams;\n"],"sourceRoot":""}