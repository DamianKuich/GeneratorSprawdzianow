{"version":3,"sources":["webpack:///./djsr/frontend/src/components/PasswordReset.js"],"names":["PasswordReset","props","state","isSuccessFull","password","passwordConfirm","Yup","shape","min","max","required","values","helpers","setTimeout","setSubmitting","token","match","params","axiosInstanceNoAuth","post","then","response","setState","error","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Component","propTypes"],"mappings":"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","file":"7.main.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCol, MDBRow } from \"mdbreact\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axiosInstance, {axiosInstanceNoAuth} from \"./axiosAPI\";\nimport FormikMdInput from \"./FormikMDInput\";\n\n\nclass PasswordReset extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSuccessFull: null,\n    };\n  }\n\n  // componentWillMount() {\n  //\n  // }\n  //\n  // componentDidMount() {\n  //\n  // }\n  //\n  // componentWillReceiveProps(nextProps) {\n  //\n  // }\n  //\n  // shouldComponentUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentWillUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //\n  // }\n  //\n  // componentWillUnmount() {\n  //\n  // }\n\n  render() {\n    let isSuccessFull =this.state.isSuccessFull;\n    if (isSuccessFull !== null) {\n      return (\n        <MDBRow center>\n          <MDBCol md=\"6\" sm=\"8\" xs=\"12\" lg=\"6\" xl=\"4\">\n            <MDBCard>\n              <MDBCardBody className=\"p-md-5 p-lg-5 p-xl-5\">\n                {(isSuccessFull) ? (\"Resetowanie hasla zakonczono powodzeniem\"):(\"Nie udało sie zmienic hasła\")}\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n      );\n    }\n    return (\n      <MDBRow center>\n        <MDBCol md=\"6\" sm=\"8\" xs=\"12\" lg=\"6\" xl=\"4\">\n          <MDBCard>\n            <MDBCardBody className=\"p-md-5 p-lg-5 p-xl-5\">\n              <Formik\n                initialValues={{\n                  password: \"\",\n                  passwordConfirm: \"\",\n                }}\n                validationSchema={Yup.object().shape({\n                  password: Yup.string()\n                    .min(8, \"Too Short!\")\n                    .max(50, \"Too Long!\")\n                    .required(\"Pole wymagane\"),\n                  passwordConfirm: Yup.string()\n                    .min(8, \"Too Short!\")\n                    .max(50, \"Too Long!\")\n                    .required(\"Pole wymagane\"),\n                })}\n                onSubmit={(values, helpers) => {\n                  setTimeout(() => {\n                    helpers.setSubmitting(true);\n                    let token = this.props.match.params.token;\n                    axiosInstanceNoAuth\n                      .post(`/user/passreset/${token}/$`, {\n                        password: values.password,\n                      })\n                      .then((response) => {\n                        // axiosInstance.defaults.headers[\"Authorization\"] =\n                        //   \"JWT \" + response.data.access;\n                        // localStorage.setItem(\n                        //   \"access_token\",\n                        //   response.data.access\n                        // );\n                        // localStorage.setItem(\n                        //   \"refresh_token\",\n                        //   response.data.refresh\n                        // );\n                        // helpers.setSubmitting(false);\n                        // this.props.checkUser();\n                        // this.props.history.push(\"/\");\n                        this.setState({isSuccessFull:true})\n                      })\n                      .catch((error) => {\n                        // console.log(\"login error\", error.response);\n                        // const errResponse = error.response;\n                        // helpers.setSubmitting(false);\n                        // if (\n                        //   errResponse.status === 401 &&\n                        //   errResponse.statusText === \"Unauthorized\"\n                        // ) {\n                        //   helpers.setValues(\n                        //     {\n                        //       name: \"\",\n                        //       password: \"\",\n                        //     },\n                        //     false\n                        //   );\n                        //   helpers.setTouched(\n                        //     {\n                        //       name: false,\n                        //       password: false,\n                        //     },\n                        //     false\n                        //   );\n                        //   helpers.setFieldError(\n                        //     \"general\",\n                        //     \"Nieprawidłowa nazwa użytkownika lub hasło\"\n                        //   );\n                        // }\n                        this.setState({isSuccessFull:false})\n                      });\n                  }, 400);\n                }}\n              >\n                {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n                }) => (\n                  <Form onSubmit={handleSubmit}>\n                    <p className=\"h3 text-center mb-4\">Podaj nowe hasło</p>\n                    <div className=\"grey-text\">\n                      <FormikMdInput\n                        label=\"Hasło\"\n                        icon=\"fa-lock\"\n                        errors={errors.password}\n                        type=\"password\"\n                        name=\"password\"\n                        id=\"password\"\n                        touched={touched.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.password}\n                        hideInput\n                        disableAutocomplete={true}\n                      />\n                      <FormikMdInput\n                        label=\"Powtorz hasło\"\n                        icon=\"fa-lock\"\n                        errors={errors.passwordConfirm}\n                        type=\"password\"\n                        name=\"passwordConfirm\"\n                        id=\"passwordConfirm\"\n                        touched={touched.passwordConfirm}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.passwordConfirm}\n                        hideInput\n                        disableAutocomplete={true}\n                      />\n                      {/*{!!errors.general && (*/}\n                      {/*  <div className=\"invalid-feedback d-block pb-4\">*/}\n                      {/*    {errors.general}*/}\n                      {/*  </div>*/}\n                      {/*)}*/}\n                    </div>\n                    <div className=\"text-center\">\n                      <MDBBtn\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                      >\n                        Zmień hasło\n                      </MDBBtn>\n                    </div>\n                  </Form>\n                )}\n              </Formik>\n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n      </MDBRow>\n    );\n  }\n}\n\nPasswordReset.propTypes = {};\n\nexport default PasswordReset;\n"],"sourceRoot":""}