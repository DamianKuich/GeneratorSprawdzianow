{"version":3,"sources":["webpack:///./djsr/frontend/src/components/FormikMDInput.js","webpack:///./djsr/frontend/src/components/PasswordReset.js"],"names":["FormikMdInput","name","touched","value","errors","icon","onChange","onBlur","label","id","type","hideInput","disableAutocomplete","disabled","prepend","useState","active","setActive","join","e","console","log","PasswordReset","props","state","isSuccessFull","password","passwordConfirm","Yup","shape","min","max","required","values","helpers","setTimeout","setSubmitting","token","match","params","axiosInstanceNoAuth","post","then","response","setState","error","handleChange","handleBlur","handleSubmit","isSubmitting","Component","propTypes"],"mappings":"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","file":"10.main.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst FormikMdInput = ({\r\n  name,\r\n  touched,\r\n  value,\r\n  errors,\r\n  icon,\r\n  onChange,\r\n  onBlur,\r\n  label,\r\n  id,\r\n  type,\r\n  hideInput,\r\n  disableAutocomplete,\r\n  disabled,\r\n  prepend,\r\n}) => {\r\n  const [active, setActive] = useState(false);\r\n  //todo repair prepend render\r\n\r\n  // console.log(\r\n  //   \"ninput\",\r\n  //   name,\r\n  //   active,\r\n  //   value === \"\",\r\n  //   value === null,\r\n  //   active || !(value == \"\" || value == null),\r\n  //     \"value\",\r\n  //     value\r\n  // );\r\n  return (\r\n    <div className=\"md-form form-group\">\r\n      {!!icon && (\r\n        <i\r\n          className={[\r\n            \"fa\",\r\n            icon,\r\n            \"prefix\",\r\n            touched ? (!errors ? \"text-success\" : \"red-text\") : \"\",\r\n          ].join(\" \")}\r\n        />\r\n      )}\r\n      {!!prepend && (\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\">{prepend}</span>\r\n        </div>\r\n      )}\r\n      <input\r\n        name={name}\r\n        onChange={onChange}\r\n        onBlur={(e) => {\r\n          onBlur(e);\r\n          setActive(false);\r\n        }}\r\n        onFocus={() => {\r\n            console.log(\"input focus event\",name)\r\n          setActive(true);\r\n        }}\r\n        value={value}\r\n        id={id}\r\n        type={type}\r\n        autoComplete={disableAutocomplete ? \"off\" : \"on\"}\r\n        // className=\"form-control is-invalid\"\r\n        className={[\r\n          \"form-control\",\r\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\r\n          hideInput ? \"text-password\" : \"\",\r\n          disabled ? \"disabled\" : \"\",\r\n        ].join(\" \")}\r\n        disabled={disabled}\r\n      />\r\n      <label\r\n        htmlFor={id}\r\n        className={[\r\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\r\n          active || !(value === \"\" || value === null) ? \"active\" : \"\",\r\n        ].join(\" \")}\r\n      >\r\n        {!!label ? label : \"\"}\r\n      </label>\r\n      {!!errors && !!touched && (\r\n        <div className=\"invalid-feedback d-block\">{errors}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormikMdInput;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCol, MDBRow } from \"mdbreact\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axiosInstance, {axiosInstanceNoAuth} from \"./axiosAPI\";\r\nimport FormikMdInput from \"./FormikMDInput\";\r\n\r\n\r\nclass PasswordReset extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSuccessFull: null,\r\n    };\r\n  }\r\n\r\n  // componentWillMount() {\r\n  //\r\n  // }\r\n  //\r\n  // componentDidMount() {\r\n  //\r\n  // }\r\n  //\r\n  // componentWillReceiveProps(nextProps) {\r\n  //\r\n  // }\r\n  //\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //\r\n  // }\r\n  //\r\n  // componentWillUpdate(nextProps, nextState) {\r\n  //\r\n  // }\r\n  //\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //\r\n  // }\r\n  //\r\n  // componentWillUnmount() {\r\n  //\r\n  // }\r\n\r\n  render() {\r\n    let isSuccessFull =this.state.isSuccessFull;\r\n    if (isSuccessFull !== null) {\r\n      return (\r\n        <MDBRow center>\r\n          <MDBCol md=\"6\" sm=\"8\" xs=\"12\" lg=\"6\" xl=\"4\">\r\n            <MDBCard>\r\n              <MDBCardBody className=\"p-md-5 p-lg-5 p-xl-5\">\r\n                {(isSuccessFull) ? (\"Resetowanie hasla zakonczono powodzeniem\"):(\"Nie udało sie zmienic hasła\")}\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      );\r\n    }\r\n    return (\r\n      <MDBRow center>\r\n        <MDBCol md=\"6\" sm=\"8\" xs=\"12\" lg=\"6\" xl=\"4\">\r\n          <MDBCard>\r\n            <MDBCardBody className=\"p-md-5 p-lg-5 p-xl-5\">\r\n              <Formik\r\n                initialValues={{\r\n                  password: \"\",\r\n                  passwordConfirm: \"\",\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                  password: Yup.string()\r\n                    .min(8, \"Too Short!\")\r\n                    .max(50, \"Too Long!\")\r\n                    .required(\"Pole wymagane\"),\r\n                  passwordConfirm: Yup.string()\r\n                    .min(8, \"Too Short!\")\r\n                    .max(50, \"Too Long!\")\r\n                    .required(\"Pole wymagane\"),\r\n                })}\r\n                onSubmit={(values, helpers) => {\r\n                  setTimeout(() => {\r\n                    helpers.setSubmitting(true);\r\n                    let token = this.props.match.params.token;\r\n                    axiosInstanceNoAuth\r\n                      .post(`/user/passreset/${token}/$`, {\r\n                        password: values.password,\r\n                      })\r\n                      .then((response) => {\r\n                        // axiosInstance.defaults.headers[\"Authorization\"] =\r\n                        //   \"JWT \" + response.data.access;\r\n                        // localStorage.setItem(\r\n                        //   \"access_token\",\r\n                        //   response.data.access\r\n                        // );\r\n                        // localStorage.setItem(\r\n                        //   \"refresh_token\",\r\n                        //   response.data.refresh\r\n                        // );\r\n                        // helpers.setSubmitting(false);\r\n                        // this.props.checkUser();\r\n                        // this.props.history.push(\"/\");\r\n                        this.setState({isSuccessFull:true})\r\n                      })\r\n                      .catch((error) => {\r\n                        // console.log(\"login error\", error.response);\r\n                        // const errResponse = error.response;\r\n                        // helpers.setSubmitting(false);\r\n                        // if (\r\n                        //   errResponse.status === 401 &&\r\n                        //   errResponse.statusText === \"Unauthorized\"\r\n                        // ) {\r\n                        //   helpers.setValues(\r\n                        //     {\r\n                        //       name: \"\",\r\n                        //       password: \"\",\r\n                        //     },\r\n                        //     false\r\n                        //   );\r\n                        //   helpers.setTouched(\r\n                        //     {\r\n                        //       name: false,\r\n                        //       password: false,\r\n                        //     },\r\n                        //     false\r\n                        //   );\r\n                        //   helpers.setFieldError(\r\n                        //     \"general\",\r\n                        //     \"Nieprawidłowa nazwa użytkownika lub hasło\"\r\n                        //   );\r\n                        // }\r\n                        this.setState({isSuccessFull:false})\r\n                      });\r\n                  }, 400);\r\n                }}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <p className=\"h3 text-center mb-4\">Podaj nowe hasło</p>\r\n                    <div className=\"grey-text\">\r\n                      <FormikMdInput\r\n                        label=\"Hasło\"\r\n                        icon=\"fa-lock\"\r\n                        errors={errors.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        touched={touched.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                        hideInput\r\n                        disableAutocomplete={true}\r\n                      />\r\n                      <FormikMdInput\r\n                        label=\"Powtorz hasło\"\r\n                        icon=\"fa-lock\"\r\n                        errors={errors.passwordConfirm}\r\n                        type=\"password\"\r\n                        name=\"passwordConfirm\"\r\n                        id=\"passwordConfirm\"\r\n                        touched={touched.passwordConfirm}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.passwordConfirm}\r\n                        hideInput\r\n                        disableAutocomplete={true}\r\n                      />\r\n                      {/*{!!errors.general && (*/}\r\n                      {/*  <div className=\"invalid-feedback d-block pb-4\">*/}\r\n                      {/*    {errors.general}*/}\r\n                      {/*  </div>*/}\r\n                      {/*)}*/}\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <MDBBtn\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                      >\r\n                        Zmień hasło\r\n                      </MDBBtn>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordReset.propTypes = {};\r\n\r\nexport default PasswordReset;\r\n"],"sourceRoot":""}