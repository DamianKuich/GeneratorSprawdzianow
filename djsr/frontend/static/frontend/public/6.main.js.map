{"version":3,"sources":["webpack:///./djsr/frontend/src/components/FormikMDInput.js","webpack:///./djsr/frontend/src/components/UserExams.js"],"names":["FormikMdInput","name","touched","value","errors","icon","onChange","onBlur","label","id","type","hideInput","disableAutocomplete","disabled","prepend","useState","active","setActive","join","e","console","log","UserExams","props","setState","exams","axiosInstance","get","then","response","data","error","exam","state","concat","post","tasks","addExam","updateExams","Yup","shape","min","max","required","values","helpers","setTimeout","setSubmitting","errResponse","setValues","setTouched","setFieldError","handleChange","handleBlur","handleSubmit","isSubmitting","general","map","createExamCopy","Component","propTypes"],"mappings":"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","file":"6.main.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst FormikMdInput = ({\n  name,\n  touched,\n  value,\n  errors,\n  icon,\n  onChange,\n  onBlur,\n  label,\n  id,\n  type,\n  hideInput,\n  disableAutocomplete,\n  disabled,\n  prepend,\n}) => {\n  const [active, setActive] = useState(false);\n  //todo repair prepend render\n\n  // console.log(\n  //   \"ninput\",\n  //   name,\n  //   active,\n  //   value === \"\",\n  //   value === null,\n  //   active || !(value == \"\" || value == null),\n  //     \"value\",\n  //     value\n  // );\n  return (\n    <div className=\"md-form form-group\">\n      {!!icon && (\n        <i\n          className={[\n            \"fa\",\n            icon,\n            \"prefix\",\n            touched ? (!errors ? \"text-success\" : \"red-text\") : \"\",\n          ].join(\" \")}\n        />\n      )}\n      {!!prepend && (\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text\">{prepend}</span>\n        </div>\n      )}\n      <input\n        name={name}\n        onChange={onChange}\n        onBlur={(e) => {\n          onBlur(e);\n          setActive(false);\n        }}\n        onFocus={() => {\n            console.log(\"input focus event\",name)\n          setActive(true);\n        }}\n        value={value}\n        id={id}\n        type={type}\n        autoComplete={disableAutocomplete ? \"off\" : \"on\"}\n        // className=\"form-control is-invalid\"\n        className={[\n          \"form-control\",\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\n          hideInput ? \"text-password\" : \"\",\n          disabled ? \"disabled\" : \"\",\n        ].join(\" \")}\n        disabled={disabled}\n      />\n      <label\n        htmlFor={id}\n        className={[\n          touched ? (!errors ? \"is-valid\" : \"is-invalid\") : \"\",\n          active || !(value === \"\" || value === null) ? \"active\" : \"\",\n        ].join(\" \")}\n      >\n        {!!label ? label : \"\"}\n      </label>\n      {!!errors && !!touched && (\n        <div className=\"invalid-feedback d-block\">{errors}</div>\n      )}\n    </div>\n  );\n};\n\nexport default FormikMdInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCol,\n  MDBContainer,\n  MDBRow,\n} from \"mdbreact\";\nimport axiosInstance from \"./axiosAPI\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormikMdInput from \"./FormikMDInput\";\nimport { Link } from \"react-router-dom\";\n\nclass UserExams extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exams: null,\n    };\n  }\n\n  updateExams = () => {\n    this.setState({ exams: null });\n    axiosInstance\n      .get(\"/user/tests/\")\n      .then((response) => {\n        console.log(\"UE update response\", response, \"exams\", response.data);\n        this.setState({ exams: response.data });\n      })\n      .catch((error) => {\n        console.log(\"UE update error response\", error);\n      });\n  };\n  addExam = (exam) => {\n    this.setState((state) => {\n      state.exams = [exam].concat(state.exams);\n      return state;\n    });\n  };\n  createExamCopy = (exam) => {\n    axiosInstance\n      .post(\"/user/maketest/\", {\n        name: exam.name + \"-kopia\",\n        tasks: exam.tasks,\n      })\n      .then((response) => {\n        this.addExam(response.data[0]);\n      });\n  };\n  // componentWillMount() {\n  //\n  // }\n  //\n  componentDidMount() {\n    this.updateExams();\n  }\n  //\n  // componentWillReceiveProps(nextProps) {\n  //\n  // }\n  //\n  // shouldComponentUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentWillUpdate(nextProps, nextState) {\n  //\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //\n  // }\n  //\n  // componentWillUnmount() {\n  //\n  // }\n\n  render() {\n    let exams = this.state.exams;\n    if (!exams) {\n      return (\n        <MDBContainer>\n          <div>Ladowanie</div>\n        </MDBContainer>\n      );\n    }\n    return (\n      <MDBContainer>\n        <div className=\"w-100 h1-responsive text-center mb-5\">\n          Moje sprawdziany\n        </div>\n        <MDBRow>\n          <MDBCol size={3}>\n            <MDBCard className=\"w-100 mb-5\">\n              <MDBCardBody>\n                <MDBCardTitle>Dodaj Sprawdzian</MDBCardTitle>\n                <Formik\n                  initialValues={{\n                    name: \"\",\n                  }}\n                  validationSchema={Yup.object().shape({\n                    name: Yup.string()\n                      .min(2, \"Nazwa za krotka\")\n                      .max(50, \"Nazwa za dluga\")\n                      .required(\"Pole wymagane\"),\n                  })}\n                  onSubmit={(values, helpers) => {\n                    setTimeout(() => {\n                      helpers.setSubmitting(true);\n                      axiosInstance\n                        .post(\"/user/maketest/\", {\n                          name: values.name,\n                          tasks: \"\",\n                        })\n                        .then((response) => {\n                          console.log(\"UE create response\", response);\n                          this.addExam(response.data[0]);\n                          helpers.setSubmitting(false);\n                          // this.props.history.push(\"/\");\n                        })\n                        .catch((error) => {\n                          // console.log(\"login error\", error.response);\n                          const errResponse = error.response;\n                          helpers.setSubmitting(false);\n                          helpers.setValues(\n                            {\n                              name: \"\",\n                            },\n                            false\n                          );\n                          helpers.setTouched(\n                            {\n                              name: false,\n                            },\n                            false\n                          );\n                          helpers.setFieldError(\"general\", \"Nazwa w uzyciu\");\n                        });\n                    }, 400);\n                  }}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                  }) => (\n                    <Form onSubmit={handleSubmit}>\n                      <div className=\"grey-text\">\n                        <FormikMdInput\n                          label=\"Nazwa sprawdzianu\"\n                          errors={errors.name}\n                          name=\"name\"\n                          id=\"name\"\n                          touched={touched.name}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.name}\n                          disabled={isSubmitting}\n                        />\n                        {!!errors.general && (\n                          <div className=\"invalid-feedback d-block pb-4\">\n                            {errors.general}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"text-center\">\n                        <MDBBtn\n                          color=\"primary\"\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                        >\n                          Zapisz\n                        </MDBBtn>\n                      </div>\n                    </Form>\n                  )}\n                </Formik>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n          {exams.map((exam) => {\n            return (\n              <MDBCol size={3}>\n                <MDBCard className=\"w-100 mb-5\">\n                  <MDBCardBody className=\"text-center\">\n                    <MDBCardTitle>{exam.name}</MDBCardTitle>\n                    <Link to={\"/editor/\" + exam.id}>\n                      <MDBBtn>Edytuj</MDBBtn>\n                    </Link>\n                    <MDBBtn\n                      onClick={() => {\n                        this.createExamCopy(exam);\n                      }}\n                    >\n                      Utworz kopie\n                    </MDBBtn>\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n            );\n          })}\n        </MDBRow>\n      </MDBContainer>\n    );\n  }\n}\n\nUserExams.propTypes = {};\n\nexport default UserExams;\n"],"sourceRoot":""}